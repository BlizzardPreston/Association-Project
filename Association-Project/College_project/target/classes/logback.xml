<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<configuration>-->

<!--    &lt;!&ndash; 日志根目录&ndash;&gt;-->
<!--    <springProperty scope="context" name="LOG_HOME" source="logging.path" defaultValue="./logs/springboot-logback"/>-->

<!--    &lt;!&ndash; 日志级别 &ndash;&gt;-->
<!--    <springProperty scope="context" name="LOG_ROOT_LEVEL" source="logging.level.root" defaultValue="INFO"/>-->

<!--    &lt;!&ndash;  标识这个"STDOUT" 将会添加到这个logger &ndash;&gt;-->
<!--    <springProperty scope="context" name="STDOUT" source="log.stdout" defaultValue="STDOUT"/>-->

<!--    <springProperty scope="context" name="SPRING_APPLICATION_NAME" source="spring.application.name"/>-->

<!--    &lt;!&ndash; 日志文件名称&ndash;&gt;-->
<!--    <property name="LOG_PREFIX" value="spring-boot-logback" />-->

<!--    &lt;!&ndash; 日志文件编码&ndash;&gt;-->
<!--    <property name="LOG_CHARSET" value="UTF-8" />-->

<!--    &lt;!&ndash; 日志文件路径+日期&ndash;&gt;-->
<!--    <property name="LOG_DIR" value="${LOG_HOME}/%d{yyyyMMdd}" />-->

<!--    &lt;!&ndash;对日志进行格式化&ndash;&gt;-->
<!--    <property name="LOG_MSG_COLOR" value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) | %highlight(%-5level) | [${SPRING_APPLICATION_NAME}] [%t] [%cyan(%c)] [line: %line] | %msg %n "/>-->
<!--    <property name="LOG_MSG" value="%d{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | [${SPRING_APPLICATION_NAME}] [%t] [%c] [line: %line] | %msg %n "/>-->

<!--    &lt;!&ndash;文件大小，默认10MB&ndash;&gt;-->
<!--    <property name="MAX_FILE_SIZE" value="50MB" />-->

<!--    &lt;!&ndash; 配置日志的滚动时间 ，表示只保留最近 10 天的日志&ndash;&gt;-->
<!--    <property name="MAX_HISTORY" value="10"/>-->

<!--    &lt;!&ndash;输出到控制台&ndash;&gt;-->
<!--    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash; 输出的日志内容格式化&ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            <pattern>${LOG_MSG_COLOR}</pattern>-->
<!--        </layout>-->
<!--    </appender>-->

<!--    &lt;!&ndash;输出到文件&ndash;&gt;-->
<!--    <appender name="0" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--    </appender>-->

<!--    &lt;!&ndash; 定义 ALL 日志的输出方式:&ndash;&gt;-->
<!--    <appender name="FILE_ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;日志文件路径，日志文件名称&ndash;&gt;-->
<!--        <File>${LOG_HOME}/all-${SPRING_APPLICATION_NAME}.log</File>-->

<!--        &lt;!&ndash; 设置滚动策略，当天的日志大小超过 ${MAX_FILE_SIZE} 文件大小时候，新的内容写入新的文件， 默认10MB &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->

<!--            &lt;!&ndash;日志文件路径，新的 ALL 日志文件名称，“ i ” 是个变量 &ndash;&gt;-->
<!--            <FileNamePattern>${LOG_DIR}/all-${SPRING_APPLICATION_NAME}%i.log</FileNamePattern>-->

<!--            &lt;!&ndash; 配置日志的滚动时间 ，表示只保留最近 10 天的日志&ndash;&gt;-->
<!--            <MaxHistory>${MAX_HISTORY}</MaxHistory>-->

<!--            &lt;!&ndash;当天的日志大小超过 ${MAX_FILE_SIZE} 文件大小时候，新的内容写入新的文件， 默认10MB&ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->

<!--        </rollingPolicy>-->

<!--        &lt;!&ndash; 输出的日志内容格式化&ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            <pattern>${LOG_MSG}</pattern>-->
<!--        </layout>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 定义 ERROR 日志的输出方式:&ndash;&gt;-->
<!--    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 下面为配置只输出error级别的日志 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <OnMismatch>DENY</OnMismatch>-->
<!--            <OnMatch>ACCEPT</OnMatch>-->
<!--        </filter>-->
<!--        &lt;!&ndash;日志文件路径，日志文件名称&ndash;&gt;-->
<!--        <File>${LOG_HOME}/err-${SPRING_APPLICATION_NAME}.log</File>-->

<!--        &lt;!&ndash; 设置滚动策略，当天的日志大小超过 ${MAX_FILE_SIZE} 文件大小时候，新的内容写入新的文件， 默认10MB &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->

<!--            &lt;!&ndash;日志文件路径，新的 ERR 日志文件名称，“ i ” 是个变量 &ndash;&gt;-->
<!--            <FileNamePattern>${LOG_DIR}/err-${SPRING_APPLICATION_NAME}%i.log</FileNamePattern>-->

<!--            &lt;!&ndash; 配置日志的滚动时间 ，表示只保留最近 10 天的日志&ndash;&gt;-->
<!--            <MaxHistory>${MAX_HISTORY}</MaxHistory>-->

<!--            &lt;!&ndash;当天的日志大小超过 ${MAX_FILE_SIZE} 文件大小时候，新的内容写入新的文件， 默认10MB&ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--        </rollingPolicy>-->

<!--        &lt;!&ndash; 输出的日志内容格式化&ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            <Pattern>${LOG_MSG}</Pattern>-->
<!--        </layout>-->
<!--    </appender>-->

<!--    &lt;!&ndash; additivity 设为false,则logger内容不附加至root ，配置以配置包下的所有类的日志的打印，级别是 ERROR&ndash;&gt;-->

<!--    <logger name="org.springframework"     level="ERROR" />-->
<!--    <logger name="org.apache.commons"      level="ERROR" />-->
<!--    <logger name="org.apache.zookeeper"    level="ERROR"  />-->
<!--    <logger name="com.alibaba.dubbo.monitor" level="ERROR"/>-->
<!--    <logger name="com.alibaba.dubbo.remoting" level="ERROR" />-->
<!--    <logger name="com.alibaba.druid.sql" level="ERROR" />-->
<!--    <logger name="com.marktrace.animal" level="DEBUG"/>-->

<!--    &lt;!&ndash; ${LOG_ROOT_LEVEL} 日志级别 &ndash;&gt;-->
<!--    <root level="${LOG_ROOT_LEVEL}">-->

<!--        &lt;!&ndash; 标识这个"${STDOUT}"将会添加到这个logger &ndash;&gt;-->
<!--        <appender-ref ref="${STDOUT}"/>-->

<!--        &lt;!&ndash; FILE_ALL 日志输出添加到 logger &ndash;&gt;-->
<!--        <appender-ref ref="FILE_ALL"/>-->

<!--        &lt;!&ndash; FILE_ERROR 日志输出添加到 logger &ndash;&gt;-->
<!--        <appender-ref ref="FILE_ERROR"/>-->
<!--    </root>-->

<!--</configuration>-->
